plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
    id 'maven-publish'
    id 'idea'
}

apply plugin: com.matthewprenger.cursegradle.CurseGradlePlugin
apply plugin: com.github.jengelman.gradle.plugins.shadow.ShadowPlugin

archivesBaseName = "${mod_name}-fabric-${minecraft_version}"

repositories {
    maven {
        name 'LDTTeam - Modding'
        url 'https://ldtteam.jfrog.io/ldtteam/modding/'
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()

    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    implementation project(":Common")
    implementation project(":API")
    implementation project(":Platforms:Core")

    compileOnly 'org.jetbrains:annotations:16.0.2'
    testCompileOnly 'org.jetbrains:annotations:16.0.2'
}

loom {
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir(project.rootProject.projectDir.toPath().relativize(project(":Platforms:Fabric").file("run").toPath()).toString())
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir(project.rootProject.projectDir.toPath().relativize(project(":Platforms:Fabric").file("run").toPath()).toString())
        }
    }

    accessWidenerPath = project.rootProject.file("Platforms/Core/src/main/resources/${mod_id}.accesswidener")
}


processResources {
    from project(":Common").sourceSets.main.resources
    from project(":API").sourceSets.main.resources
    from project(":Platforms:Core").sourceSets.main.resources

    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
    source(project(":API").sourceSets.main.allSource)
    source(project(":Platforms:Core").sourceSets.main.allSource)
}

jar {
    from("LICENSE") {
        rename { "${it}_${mod_name}" }
    }

    classifier = "slim"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

shadowJar { shadowJarTask ->
    from(project(":Common").sourceSets.main.output)
    from(project(":API").sourceSets.main.output)
    from(project(":Platforms:Core").sourceSets.main.output)
    from(sourceSets.main.output)

    from("LICENSE") {
        rename { "${it}_${mod_name}" }
    }

    shadowJarTask.configurations = [project(":Common").configurations.shadow]

    if (project.hasProperty("shadowRenamedNamespaces") && !project.shadowRenamedNamespaces.trim().isEmpty()) {
        project.shadowRenamedNamespaces.split(',').each { n ->
            if (n.contains(':')) {
                def namespaceSpecs = n.split(':');
                project.logger.lifecycle "Shading ${namespaceSpecs[0]} to ${namespaceSpecs[1]}"
                shadowJarTask.relocate namespaceSpecs[0], namespaceSpecs[1]
            }
        }
    }

    manifest {
        attributes([
                'Maven-Artifact'          : "${project.group}:${project.archivesBaseName}:${project.version}",
                "Specification-Title"     : project.mod_id,
                "Specification-Vendor"    : project.mod_author,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${project.version}",
                "Implementation-Vendor"   : project.mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Automatic-Module-Name"   : project.mod_id,
                "MixinConfigs": "${project.mod_id}.mixins.json"
        ])
    }

    shadowJarTask.classifier = "universal"

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.remapJar.configure { remapTask ->
    remapTask.dependsOn(tasks.shadowJar)
    remapTask.mustRunAfter(tasks.shadowJar)
    input = tasks.shadowJar.archivePath
}

if ((opc.hasPropertySet("curseApiKey") || opc.hasPropertySet("CURSEAPIKEY"))) {
    project.curseforge { cf ->
        cf.apiKey = opc.hasPropertySet("curseApiKey") ? opc.getProperty("curseApiKey") : opc.getProperty("CURSEAPIKEY")

        project { cp ->
            cp.id = project.curseforge_project_id_fabric
            cp.addGameVersion "Fabric"
            cp.addGameVersion "Java ${java.toolchain.languageVersion.get().asInt()}"
            cp.addGameVersion(project.exactMinecraftVersion)
            cp.changelog = rootProject.file('build/changelog.md')
            cp.changelogType = 'markdown'
            cp.releaseType = 'release'

            opc.getStringListProperty("additionalMinecraftVersions").each { v ->
                cp.addGameVersion(v)
            }

            cp.mainArtifact(remapJar)

            afterEvaluate {
                uploadTask.dependsOn remapJar
            }

        }
        options {
            forgeGradleIntegration = false
        }
    }
}