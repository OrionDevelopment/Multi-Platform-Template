buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenLocal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            name = 'ajoberstar-backup'
            url = 'https://ajoberstar.org/bintray-backup/'
        }
    }
    dependencies {
        classpath "gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.0.0"
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
        classpath "org.zaproxy.gradle:gradle-plugin-crowdin:0.2.1"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.3"
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

apply from: 'https://raw.githubusercontent.com/ldtteam/OperaPublicaCreator/main/gradle/modules/git.gradle'
apply from: 'https://raw.githubusercontent.com/ldtteam/OperaPublicaCreator/main/gradle/modules/util.gradle'

repositories {
    mavenCentral()
    maven {
        name 'LDTTeam - Modding'
        url 'https://ldtteam.jfrog.io/ldtteam/modding/'
    }
}

version = opc.buildVersionNumberWithOffset(
        (System.getenv().containsKey("Version") ? System.getenv("Version") : project.modVersion),
        project.exactMinecraftVersion,
        opc.getProperty("sourceVersionName"),
        opc.getIntProperty("sourceVersionElementIndex"),
        opc.getIntProperty("mcVersionElementIndex")
)

subprojects { subProject ->
    if (!subProject.getChildProjects().isEmpty())
        return;

    apply from: 'https://raw.githubusercontent.com/ldtteam/OperaPublicaCreator/main/gradle/modules/git.gradle'
    apply from: 'https://raw.githubusercontent.com/ldtteam/OperaPublicaCreator/main/gradle/modules/util.gradle'

    apply plugin: 'java'
    apply plugin: 'maven-publish'

    subProject.version = rootProject.version

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    java.withSourcesJar()
    java.withJavadocJar()

    jar {
        manifest {
            attributes([
                    'Specification-Title'     : mod_name,
                    'Specification-Vendor'    : mod_author,
                    'Specification-Version'   : project.jar.archiveVersion,
                    'Implementation-Title'    : project.name,
                    'Implementation-Version'  : project.jar.archiveVersion,
                    'Implementation-Vendor'   : mod_author,
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    'Timestampe'              : System.currentTimeMillis(),
                    'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                    'Build-On-Minecraft'      : minecraft_version
            ])
        }
    }

    repositories {
        mavenCentral()
        maven {
            name = 'Sponge / Mixin'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }
        maven {
            name = 'BlameJared Maven (CrT / Bookshelf)'
            url = 'https://maven.blamejared.com'
        }
    }

    dependencies {
        // unit testing
        testImplementation 'junit:junit:4.11'
        testImplementation "org.mockito:mockito-core:1.+"
        testImplementation group: 'org.powermock', name: 'powermock-module-junit4', version: '1.6.5'
        testImplementation group: 'org.powermock', name: 'powermock-api-mockito', version: '1.6.5'
        testImplementation group: 'org.powermock', name: 'powermock-module-junit4-rule-agent', version: '1.6.5'
        testImplementation 'org.assertj:assertj-core:3.9.0'
        testImplementation group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
        testImplementation group: 'org.openjdk.jmh', name: 'jmh-generator-annprocess', version: '1.21'
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
        it.options.release = 17
    }

    tasks.withType(Javadoc.class, {task ->
        task.options.tags(
                'apiNote:a:API Note:',
                'implSpec:a:Implementation Requirements:',
                'implNote:a:Implementation Note:',
                'reason:a:The reason for adding an @Overwrite'
        )
    })

    publishing {
        publications {
            mavenJava(MavenPublication) {pub ->
                from subProject.components.java

                pom {
                    url = subProject.githubUrl
                    licenses {
                        license {
                            name = 'GNU GENERAL PUBLIC LICENSE Version 3'
                            url = 'https://www.gnu.org/licenses/gpl-3.0.en.html'
                        }
                    }
                    developers {
                        developer {
                            id = 'OrionDevelopment'
                            name = 'Marc Hermans'
                            email = 'marc.hermans@ldtteam.com'
                        }
                    }
                    scm {
                        connection = subProject.gitUrl
                        developerConnection = subProject.gitConnectUrl
                        url = subProject.projectUrl
                    }
                }

                //Replace all deobf dependencies with normal jar references.
                pom.withXml { xmlProvider ->
                    def dependencies = asNode().dependencies
                    def allDeps = dependencies.'*';

                    allDeps.findAll {
                        println it
                    }

                    // Remove forge deps
                    allDeps.findAll() { el ->
                        el.artifactId.text() == 'forge' && el.groupId.text() == 'net.minecraftforge'
                    }.forEach() { el ->
                        el.parent().remove(el)
                    }
                    //remove forgegradle's mapped suffix from versions & set as optional so anyone else doesn't inherit them
                    allDeps.findAll() { el ->
                        el.version.text().contains('_mapped_')
                    }.each { el ->
                        def version = el.version
                        version.each {
                            it.setValue(it.text().substring(0, it.text().indexOf('_mapped_')))
                        }
                    }
                }
            }
        }

        if (System.getenv().containsKey("LDTTeamJfrogUsername") && System.getenv().containsKey("LDTTeamJfrogPassword")) {
            repositories {
                maven {
                    name 'LDTTeamJfrog'
                    credentials {
                        username System.getenv().get("LDTTeamJfrogUsername")
                        password System.getenv().get("LDTTeamJfrogPassword")
                    }
                    url 'https://ldtteam.jfrog.io/ldtteam/mods-maven'
                }
            }
        }

        repositories {
            maven {
                name 'RepoDirectory'
                url 'file://' + rootProject.file('repo').getAbsolutePath()
            }
        }
    }
}

task("createChangelog") {
    group = 'upload'

    doLast {
        def teamCityURL = "https://buildsystem.ldtteam.com/"
        project.rootProject.file("build/changelog.md").parentFile.mkdirs()
        def file = new FileOutputStream(project.rootProject.file("build/changelog.md"))
        def out = new BufferedOutputStream(file)
        def changesXML = new XmlSlurper().parse(teamCityURL + "guestAuth/app/rest/changes?locator=build:(id:" + teamcity["teamcity.build.id"] + ")")

        def changes = changesXML.change
        out << "# Chisels & Bits Changelog \n"
        out << "## Version: _" + version + "_ \n"

        out << "### Changes: \n"
        if (changes.size() > 0) {
            for (int i = 0; i < changes.size(); i++) {
                def changeDetailsURL = teamCityURL + "guestAuth/app/rest/changes/id:" + changes[i].@id.text()
                def changeDetailsXml = new XmlSlurper().parse(changeDetailsURL)
                def changeComment = changeDetailsXml.comment.text().trim()

                out << "* " + changeComment + "\n"
            }
        } else {
            out << "_No Changes detected!_"
        }

        out.close()
    }
}